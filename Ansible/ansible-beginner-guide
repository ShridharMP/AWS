ssh-copy-id ip-address --.it is to connect to targetor slave node but this command don't have enough permission to do some activity 
as we wanted.
create 2EC2 instances --> (master and slave) or (source and target).
mkdir ansible.
sudo apt update.
sudo apt install ansible.
ansible --version.
Create inventory file in ansible folder.
Add target EC2 instance private IP address in inventory file.
Connect with master ec2 instance with target ec2 intance using password less authentication.
cd ansible.
ssh-keygen  (this cmd will generate 3files namely authorized-keys,ida-rsa(private key) ,ida-rsa.pub key (public key).
add public key of master or source node ec2 instance in target or slave node of ec2 instance.
Connect to target node from master node using the (ssh ip-address of target) ex: ssh 172.31.91.104
Once connection is successfull we can give commands to target node from master node by creating ansible playbook or ansible adhoc commands

cd ansible
vim inventory
ansible -i inventory all -m "shell" -a "touch devopsclass"

***********************************************************************
playbook is nothing but Ansible file
everytime no need to write playbook for small task for that use adhoc commands 
fallow below link to write shell script or playbook or ansible file --shell – Execute shell commands on targets
(https://docs.ansible.com/ansible/2.9/modules/list_of_all_modules.html)
Examples:
        ansible -i inventory all -m "shell" -a "touch devopsclass"
        ansible -i inventory all -m "shell" -a "ls -ltr"
        ansible -i inventory all -m "shell" -a "df"
        ansible -i inventory all -m "shell" -a "nproc"


How to write playbook
**************************************************************************
https://sujitpatel.in/article/how-to-install-nginx-using-ansible-playbook/
Ex:
**********************************************************************************************************
---
- name: Install and start nginx
  hosts: all
  become: yes
  become_user: root

  tasks:
    - name: install nginx
      apt: 
          name: nginx 
          state: present
    - name: start nginx
      service:
          name: nginx
          state: started
**********************************************************************************************************
The first line, “—“, is a YAML syntax marker indicating the start of a YAML file.
The “hosts” line specifies the group of hosts that the playbook will run against, in this case the “web” group.
The “tasks” section lists the individual tasks that will be executed on each host in the group. In this case, there are two tasks.
The first task, “install nginx”, uses the “apt” module to install the Nginx web server. The “name” parameter specifies the name of the package to install (in this case, “nginx”), and the “state” parameter specifies that Ansible should ensure the package is installed and up to date.
The second task, “start nginx”, uses the “service” module to start the Nginx service. The “name” parameter specifies the name of the service (in this case, “nginx”), and the “state” parameter specifies that Ansible should ensure the service is running.
Overall, this playbook will ensure that the Nginx web server is installed and running on all hosts in the “web” group.

How to run playbook
ansible-playbook -i inventory.cfg nginx_install.yml -b
                        or
ansible-playbook -i inventory firstplaybook.yml -b
                        or
ansible-playbook -i inventory firstplaybook.yml

ansible-playbook is the Ansible command used to run a playbook.
-i inventory.cfg specifies the inventory file to use. In this case, the inventory file is inventory.cfg.
nginx_install.yml or firstplaybook is the name of the playbook file to run. In this case, the playbook file is nginx_install.yml.
-b is a short form of the --become option, which tells Ansible to run the playbook with elevated privileges (i.e., as a superuser). This option is typically required for tasks that require elevated permissions, such as installing packages or modifying system configuration files.
So, putting it all together, the command will run the nginx_install.yml playbook against the hosts listed in the inventory.cfg file, with elevated privileges.


How to check whether nginx installed or not
**********************************************
sudo systemctl status nginx


OutPut:
● nginx.service - A high performance web server and a reverse proxy server
     Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: enabled)
     Active: active (running) since Tue 2024-07-23 03:42:09 UTC; 21s ago
       Docs: man:nginx(8)
    Process: 2503 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
    Process: 2505 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)
   Main PID: 2506 (nginx)
      Tasks: 2 (limit: 1130)
     Memory: 1.7M (peak: 1.9M)
        CPU: 12ms
     CGroup: /system.slice/nginx.service
             ├─2506 "nginx: master process /usr/sbin/nginx -g daemon on; master_process on;"
             └─2507 "nginx: worker process"



Industry level task
----------------------
.Create 3 EC2 instancein AWS clous (Terraform)
.configure 1 instance as master (Ansible)
.other 2 ec2 instance as worker or slave or target (Ansible)






